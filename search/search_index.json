{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages appdirs","title":"appdirs"},{"location":"appdirs--index/","text":"AppDirs \u00b6 Library for detecting platform specific user directories e.g. for data, config, cache, logs. Most stuff is copied from the python library appdirs from ActiveState. Public Types \u00b6 primitive WindowsCodePages primitive KnownFolderIds primitive KnownFolders primitive Paths class AppDirs","title":"Package"},{"location":"appdirs--index/#appdirs","text":"Library for detecting platform specific user directories e.g. for data, config, cache, logs. Most stuff is copied from the python library appdirs from ActiveState.","title":"AppDirs"},{"location":"appdirs--index/#public-types","text":"primitive WindowsCodePages primitive KnownFolderIds primitive KnownFolders primitive Paths class AppDirs","title":"Public Types"},{"location":"appdirs-AppDirs/","text":"AppDirs \u00b6 [Source] class ref AppDirs Constructors \u00b6 create \u00b6 [Source] An AppDirs instance derives the platform specific directories from the process environment variables. It will return appdirs for the user of the current process. Creating appdirs requires: - passing environment variables, only on unix and osx systems. - a name of the app you want to get directories for - optionally: a name of the app author (be it a company or a person) - optionally: a version of your app, if you want to separate directories also by version new ref create( env_vars: (Array[String val] box | None val), app_name: String val, app_author: (String val | None val) = reference, app_version: (String val | None val) = reference, roaming: Bool val = false, osx_as_unix: Bool val = false) : AppDirs ref^ Parameters \u00b6 env_vars: ( Array [ String val] box | None val) app_name: String val app_author: ( String val | None val) = reference app_version: ( String val | None val) = reference roaming: Bool val = false osx_as_unix: Bool val = false Returns \u00b6 AppDirs ref^ Public Functions \u00b6 user_home_dir \u00b6 [Source] fun box user_home_dir() : String val ? Returns \u00b6 String val ? user_data_dir \u00b6 [Source] Returns the full path to the user-specific data dir for this application. fun box user_data_dir() : String val ? Returns \u00b6 String val ? site_data_dirs \u00b6 [Source] Returns an array of full paths to the user-shared data dirs for this application. fun box site_data_dirs() : Array[String val] val ? Returns \u00b6 Array [ String val] val ? user_config_dir \u00b6 [Source] Return full path to the user-specific config dir for this application. fun box user_config_dir() : String val ? Returns \u00b6 String val ? site_config_dirs \u00b6 [Source] Return full path to the user-shared config dirs for this application. fun box site_config_dirs() : Array[String val] val ? Returns \u00b6 Array [ String val] val ? user_cache_dir \u00b6 [Source] Return full path to the user-specific cache dir for this application. fun box user_cache_dir() : String val ? Returns \u00b6 String val ? user_state_dir \u00b6 [Source] Return full path to the user-specific state dir for this application. See https://wiki.debian.org/XDGBaseDirectorySpecification#state fun box user_state_dir() : String val ? Returns \u00b6 String val ? user_log_dir \u00b6 [Source] Return full path to the user-specific log dir for this application. fun box user_log_dir() : String val ? Returns \u00b6 String val ?","title":"class AppDirs"},{"location":"appdirs-AppDirs/#appdirs","text":"[Source] class ref AppDirs","title":"AppDirs"},{"location":"appdirs-AppDirs/#constructors","text":"","title":"Constructors"},{"location":"appdirs-AppDirs/#create","text":"[Source] An AppDirs instance derives the platform specific directories from the process environment variables. It will return appdirs for the user of the current process. Creating appdirs requires: - passing environment variables, only on unix and osx systems. - a name of the app you want to get directories for - optionally: a name of the app author (be it a company or a person) - optionally: a version of your app, if you want to separate directories also by version new ref create( env_vars: (Array[String val] box | None val), app_name: String val, app_author: (String val | None val) = reference, app_version: (String val | None val) = reference, roaming: Bool val = false, osx_as_unix: Bool val = false) : AppDirs ref^","title":"create"},{"location":"appdirs-AppDirs/#parameters","text":"env_vars: ( Array [ String val] box | None val) app_name: String val app_author: ( String val | None val) = reference app_version: ( String val | None val) = reference roaming: Bool val = false osx_as_unix: Bool val = false","title":"Parameters"},{"location":"appdirs-AppDirs/#returns","text":"AppDirs ref^","title":"Returns"},{"location":"appdirs-AppDirs/#public-functions","text":"","title":"Public Functions"},{"location":"appdirs-AppDirs/#user_home_dir","text":"[Source] fun box user_home_dir() : String val ?","title":"user_home_dir"},{"location":"appdirs-AppDirs/#returns_1","text":"String val ?","title":"Returns"},{"location":"appdirs-AppDirs/#user_data_dir","text":"[Source] Returns the full path to the user-specific data dir for this application. fun box user_data_dir() : String val ?","title":"user_data_dir"},{"location":"appdirs-AppDirs/#returns_2","text":"String val ?","title":"Returns"},{"location":"appdirs-AppDirs/#site_data_dirs","text":"[Source] Returns an array of full paths to the user-shared data dirs for this application. fun box site_data_dirs() : Array[String val] val ?","title":"site_data_dirs"},{"location":"appdirs-AppDirs/#returns_3","text":"Array [ String val] val ?","title":"Returns"},{"location":"appdirs-AppDirs/#user_config_dir","text":"[Source] Return full path to the user-specific config dir for this application. fun box user_config_dir() : String val ?","title":"user_config_dir"},{"location":"appdirs-AppDirs/#returns_4","text":"String val ?","title":"Returns"},{"location":"appdirs-AppDirs/#site_config_dirs","text":"[Source] Return full path to the user-shared config dirs for this application. fun box site_config_dirs() : Array[String val] val ?","title":"site_config_dirs"},{"location":"appdirs-AppDirs/#returns_5","text":"Array [ String val] val ?","title":"Returns"},{"location":"appdirs-AppDirs/#user_cache_dir","text":"[Source] Return full path to the user-specific cache dir for this application. fun box user_cache_dir() : String val ?","title":"user_cache_dir"},{"location":"appdirs-AppDirs/#returns_6","text":"String val ?","title":"Returns"},{"location":"appdirs-AppDirs/#user_state_dir","text":"[Source] Return full path to the user-specific state dir for this application. See https://wiki.debian.org/XDGBaseDirectorySpecification#state fun box user_state_dir() : String val ?","title":"user_state_dir"},{"location":"appdirs-AppDirs/#returns_7","text":"String val ?","title":"Returns"},{"location":"appdirs-AppDirs/#user_log_dir","text":"[Source] Return full path to the user-specific log dir for this application. fun box user_log_dir() : String val ?","title":"user_log_dir"},{"location":"appdirs-AppDirs/#returns_8","text":"String val ?","title":"Returns"},{"location":"appdirs-KnownFolderIds/","text":"KnownFolderIds \u00b6 [Source] Known folder ids as described in: https://docs.microsoft.com/en-ca/windows/desktop/shell/knownfolderid functions return the little endian byte values of the folderid GUIDs primitive val KnownFolderIds Constructors \u00b6 create \u00b6 [Source] new val create() : KnownFolderIds val^ Returns \u00b6 KnownFolderIds val^ Public Functions \u00b6 profile \u00b6 [Source] The user's profile folder. A typical path is C:\\Users\\username. Applications should not create files or folders at this level; they should put their data under the locations referred to by CSIDL_APPDATA or CSIDL_LOCAL_APPDATA. However, if you are creating a new Known Folder the profile root referred to by CSIDL_PROFILE is appropriate. FOLDERID_Profile 5E6C858F-0E22-4760-9AFE-EA3317B67173 fun box profile() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val app_data_roaming \u00b6 [Source] The file system directory that serves as a common repository for application-specific data. A typical path is C:\\Documents and Settings\\username\\Application Data. KNOWNFOLDERID: FOLDERID_RoamingAppData GUID: 3EB685DB-65F9-4CF6-A03A-E3EF65729F3D fun box app_data_roaming() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val app_data_local \u00b6 [Source] The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\\Documents and Settings\\username\\Local Settings\\Application Data. FOLDERID_LocalAppData F1B32785-6FBA-4FCF-9D55-7B8E7F157091 fun box app_data_local() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val program_data \u00b6 [Source] The file system directory that contains application data for all users. A typical path is C:\\Documents and Settings\\All Users\\Application Data. This folder is used for application data that is not user specific. For example, an application can store a spell-check dictionary, a database of clip art, or a log file in the CSIDL_COMMON_APPDATA folder. This information will not roam and is available to anyone using the computer. FOLDERID_ProgramData 62AB5D82-FDC1-4DC3-A9DD-070D1D495D97 fun box program_data() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: KnownFolderIds val) : Bool val Parameters \u00b6 that: KnownFolderIds val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: KnownFolderIds val) : Bool val Parameters \u00b6 that: KnownFolderIds val Returns \u00b6 Bool val","title":"primitive KnownFolderIds"},{"location":"appdirs-KnownFolderIds/#knownfolderids","text":"[Source] Known folder ids as described in: https://docs.microsoft.com/en-ca/windows/desktop/shell/knownfolderid functions return the little endian byte values of the folderid GUIDs primitive val KnownFolderIds","title":"KnownFolderIds"},{"location":"appdirs-KnownFolderIds/#constructors","text":"","title":"Constructors"},{"location":"appdirs-KnownFolderIds/#create","text":"[Source] new val create() : KnownFolderIds val^","title":"create"},{"location":"appdirs-KnownFolderIds/#returns","text":"KnownFolderIds val^","title":"Returns"},{"location":"appdirs-KnownFolderIds/#public-functions","text":"","title":"Public Functions"},{"location":"appdirs-KnownFolderIds/#profile","text":"[Source] The user's profile folder. A typical path is C:\\Users\\username. Applications should not create files or folders at this level; they should put their data under the locations referred to by CSIDL_APPDATA or CSIDL_LOCAL_APPDATA. However, if you are creating a new Known Folder the profile root referred to by CSIDL_PROFILE is appropriate. FOLDERID_Profile 5E6C858F-0E22-4760-9AFE-EA3317B67173 fun box profile() : Array[U8 val] val","title":"profile"},{"location":"appdirs-KnownFolderIds/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"appdirs-KnownFolderIds/#app_data_roaming","text":"[Source] The file system directory that serves as a common repository for application-specific data. A typical path is C:\\Documents and Settings\\username\\Application Data. KNOWNFOLDERID: FOLDERID_RoamingAppData GUID: 3EB685DB-65F9-4CF6-A03A-E3EF65729F3D fun box app_data_roaming() : Array[U8 val] val","title":"app_data_roaming"},{"location":"appdirs-KnownFolderIds/#returns_2","text":"Array [ U8 val] val","title":"Returns"},{"location":"appdirs-KnownFolderIds/#app_data_local","text":"[Source] The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\\Documents and Settings\\username\\Local Settings\\Application Data. FOLDERID_LocalAppData F1B32785-6FBA-4FCF-9D55-7B8E7F157091 fun box app_data_local() : Array[U8 val] val","title":"app_data_local"},{"location":"appdirs-KnownFolderIds/#returns_3","text":"Array [ U8 val] val","title":"Returns"},{"location":"appdirs-KnownFolderIds/#program_data","text":"[Source] The file system directory that contains application data for all users. A typical path is C:\\Documents and Settings\\All Users\\Application Data. This folder is used for application data that is not user specific. For example, an application can store a spell-check dictionary, a database of clip art, or a log file in the CSIDL_COMMON_APPDATA folder. This information will not roam and is available to anyone using the computer. FOLDERID_ProgramData 62AB5D82-FDC1-4DC3-A9DD-070D1D495D97 fun box program_data() : Array[U8 val] val","title":"program_data"},{"location":"appdirs-KnownFolderIds/#returns_4","text":"Array [ U8 val] val","title":"Returns"},{"location":"appdirs-KnownFolderIds/#eq","text":"[Source] fun box eq( that: KnownFolderIds val) : Bool val","title":"eq"},{"location":"appdirs-KnownFolderIds/#parameters","text":"that: KnownFolderIds val","title":"Parameters"},{"location":"appdirs-KnownFolderIds/#returns_5","text":"Bool val","title":"Returns"},{"location":"appdirs-KnownFolderIds/#ne","text":"[Source] fun box ne( that: KnownFolderIds val) : Bool val","title":"ne"},{"location":"appdirs-KnownFolderIds/#parameters_1","text":"that: KnownFolderIds val","title":"Parameters"},{"location":"appdirs-KnownFolderIds/#returns_6","text":"Bool val","title":"Returns"},{"location":"appdirs-KnownFolders/","text":"KnownFolders \u00b6 [Source] Utility for getting some known folders on windows. https://docs.microsoft.com/en-ca/windows/desktop/shell/known-folders primitive val KnownFolders Constructors \u00b6 create \u00b6 [Source] new val create() : KnownFolders val^ Returns \u00b6 KnownFolders val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( folderid: Array[U8 val] val) : String iso^ ? Parameters \u00b6 folderid: Array [ U8 val] val Returns \u00b6 String iso^ ? eq \u00b6 [Source] fun box eq( that: KnownFolders val) : Bool val Parameters \u00b6 that: KnownFolders val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: KnownFolders val) : Bool val Parameters \u00b6 that: KnownFolders val Returns \u00b6 Bool val","title":"primitive KnownFolders"},{"location":"appdirs-KnownFolders/#knownfolders","text":"[Source] Utility for getting some known folders on windows. https://docs.microsoft.com/en-ca/windows/desktop/shell/known-folders primitive val KnownFolders","title":"KnownFolders"},{"location":"appdirs-KnownFolders/#constructors","text":"","title":"Constructors"},{"location":"appdirs-KnownFolders/#create","text":"[Source] new val create() : KnownFolders val^","title":"create"},{"location":"appdirs-KnownFolders/#returns","text":"KnownFolders val^","title":"Returns"},{"location":"appdirs-KnownFolders/#public-functions","text":"","title":"Public Functions"},{"location":"appdirs-KnownFolders/#apply","text":"[Source] fun box apply( folderid: Array[U8 val] val) : String iso^ ?","title":"apply"},{"location":"appdirs-KnownFolders/#parameters","text":"folderid: Array [ U8 val] val","title":"Parameters"},{"location":"appdirs-KnownFolders/#returns_1","text":"String iso^ ?","title":"Returns"},{"location":"appdirs-KnownFolders/#eq","text":"[Source] fun box eq( that: KnownFolders val) : Bool val","title":"eq"},{"location":"appdirs-KnownFolders/#parameters_1","text":"that: KnownFolders val","title":"Parameters"},{"location":"appdirs-KnownFolders/#returns_2","text":"Bool val","title":"Returns"},{"location":"appdirs-KnownFolders/#ne","text":"[Source] fun box ne( that: KnownFolders val) : Bool val","title":"ne"},{"location":"appdirs-KnownFolders/#parameters_2","text":"that: KnownFolders val","title":"Parameters"},{"location":"appdirs-KnownFolders/#returns_3","text":"Bool val","title":"Returns"},{"location":"appdirs-Paths/","text":"Paths \u00b6 [Source] primitive val Paths Constructors \u00b6 create \u00b6 [Source] new val create() : Paths val^ Returns \u00b6 Paths val^ Public Functions \u00b6 join \u00b6 [Source] fun box join( paths: ReadSeq[String val] box) : String val Parameters \u00b6 paths: ReadSeq [ String val] box Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: Paths val) : Bool val Parameters \u00b6 that: Paths val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Paths val) : Bool val Parameters \u00b6 that: Paths val Returns \u00b6 Bool val","title":"primitive Paths"},{"location":"appdirs-Paths/#paths","text":"[Source] primitive val Paths","title":"Paths"},{"location":"appdirs-Paths/#constructors","text":"","title":"Constructors"},{"location":"appdirs-Paths/#create","text":"[Source] new val create() : Paths val^","title":"create"},{"location":"appdirs-Paths/#returns","text":"Paths val^","title":"Returns"},{"location":"appdirs-Paths/#public-functions","text":"","title":"Public Functions"},{"location":"appdirs-Paths/#join","text":"[Source] fun box join( paths: ReadSeq[String val] box) : String val","title":"join"},{"location":"appdirs-Paths/#parameters","text":"paths: ReadSeq [ String val] box","title":"Parameters"},{"location":"appdirs-Paths/#returns_1","text":"String val","title":"Returns"},{"location":"appdirs-Paths/#eq","text":"[Source] fun box eq( that: Paths val) : Bool val","title":"eq"},{"location":"appdirs-Paths/#parameters_1","text":"that: Paths val","title":"Parameters"},{"location":"appdirs-Paths/#returns_2","text":"Bool val","title":"Returns"},{"location":"appdirs-Paths/#ne","text":"[Source] fun box ne( that: Paths val) : Bool val","title":"ne"},{"location":"appdirs-Paths/#parameters_2","text":"that: Paths val","title":"Parameters"},{"location":"appdirs-Paths/#returns_3","text":"Bool val","title":"Returns"},{"location":"appdirs-WindowsCodePages/","text":"WindowsCodePages \u00b6 [Source] identifiers/constant for windows codepages for converting from one encoding to another. See: https://docs.microsoft.com/en-us/windows/desktop/Intl/code-page-identifiers primitive val WindowsCodePages Constructors \u00b6 create \u00b6 [Source] new val create() : WindowsCodePages val^ Returns \u00b6 WindowsCodePages val^ Public Functions \u00b6 utf8 \u00b6 [Source] fun box utf8() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: WindowsCodePages val) : Bool val Parameters \u00b6 that: WindowsCodePages val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: WindowsCodePages val) : Bool val Parameters \u00b6 that: WindowsCodePages val Returns \u00b6 Bool val","title":"primitive WindowsCodePages"},{"location":"appdirs-WindowsCodePages/#windowscodepages","text":"[Source] identifiers/constant for windows codepages for converting from one encoding to another. See: https://docs.microsoft.com/en-us/windows/desktop/Intl/code-page-identifiers primitive val WindowsCodePages","title":"WindowsCodePages"},{"location":"appdirs-WindowsCodePages/#constructors","text":"","title":"Constructors"},{"location":"appdirs-WindowsCodePages/#create","text":"[Source] new val create() : WindowsCodePages val^","title":"create"},{"location":"appdirs-WindowsCodePages/#returns","text":"WindowsCodePages val^","title":"Returns"},{"location":"appdirs-WindowsCodePages/#public-functions","text":"","title":"Public Functions"},{"location":"appdirs-WindowsCodePages/#utf8","text":"[Source] fun box utf8() : U32 val","title":"utf8"},{"location":"appdirs-WindowsCodePages/#returns_1","text":"U32 val","title":"Returns"},{"location":"appdirs-WindowsCodePages/#eq","text":"[Source] fun box eq( that: WindowsCodePages val) : Bool val","title":"eq"},{"location":"appdirs-WindowsCodePages/#parameters","text":"that: WindowsCodePages val","title":"Parameters"},{"location":"appdirs-WindowsCodePages/#returns_2","text":"Bool val","title":"Returns"},{"location":"appdirs-WindowsCodePages/#ne","text":"[Source] fun box ne( that: WindowsCodePages val) : Bool val","title":"ne"},{"location":"appdirs-WindowsCodePages/#parameters_1","text":"that: WindowsCodePages val","title":"Parameters"},{"location":"appdirs-WindowsCodePages/#returns_3","text":"Bool val","title":"Returns"},{"location":"src/appdirs/appdirs/","text":"\"\"\" # AppDirs Library for detecting platform specific user directories e.g. for data, config, cache, logs. Most stuff is copied from the python library [appdirs](https://github.com/ActiveState/appdirs) from ActiveState. \"\"\" use \"files\" use \"cli\" // for EnvVars use \"itertools\" use \"collections\" primitive Paths fun join(paths: ReadSeq[String]): String => Iter[String](paths.values()) .fold[String](\"\", {(acc, cur) => Path.join(acc, cur)}) type _Maybe[T] is (T | None) primitive _Opt fun get[T](s: _Maybe[T], or_else: T): T => match consume s | let value: T => consume value | None => consume or_else end class AppDirs let _home: _Maybe[String] let _env_vars: Map[String, String] val let _app_name: String let _app_author: _Maybe[String] let _app_version: _Maybe[String] let _roaming: Bool let _osx_as_unix: Bool new create( env_vars: _Maybe[Array[String] box], app_name: String, app_author: _Maybe[String] = None, app_version: _Maybe[String] = None, roaming: Bool = false, osx_as_unix: Bool = false) => \"\"\" An AppDirs instance derives the platform specific directories from the process environment variables. It will return appdirs for the user of the current process. Creating appdirs requires: - passing environment variables, only on unix and osx systems. - a name of the app you want to get directories for - optionally: a name of the app author (be it a company or a person) - optionally: a version of your app, if you want to separate directories also by version \"\"\" _env_vars = EnvVars(env_vars) _app_name = app_name _app_author = app_author _app_version = app_version _roaming = roaming _osx_as_unix = osx_as_unix _home = ifdef windows then try KnownFolders(KnownFolderIds.profile())? end else try _env_vars(\"HOME\")? end end fun _expand_user(path: String): String ? => (_home as String).join(path.split_by(\"~\").values()) fun user_home_dir(): String ? => _home as String fun user_data_dir(): String ? => \"\"\" Returns the full path to the user-specific data dir for this application. \"\"\" let os_specific_dir = ifdef osx then if _osx_as_unix then _unix_user_data_dir()? else Paths.join([_home as String; \"Library\"; \"Application Support\"; _app_name]) end elseif windows then let folder_id = if _roaming then KnownFolderIds.app_data_roaming() else KnownFolderIds.app_data_local() end Paths.join([ KnownFolders(folder_id)? _Opt.get[String](_app_author, \"\") _app_name ]) else // *nix _unix_user_data_dir()? end match _app_version | None => os_specific_dir | let v: String => Path.join(os_specific_dir, v) end fun _unix_user_data_dir(): String ? => let base_path = _env_vars.get_or_else( \"XDG_DATA_HOME\", Paths.join([_home as String; \".local\"; \"share\"])) Path.join( _expand_user(base_path)?, // make sure any '~' get replaced by the users home directory _app_name) fun site_data_dirs(): Array[String] val ? => \"\"\" Returns an array of full paths to the user-shared data dirs for this application. \"\"\" let os_specific_dirs: Array[String] iso = ifdef osx then if _osx_as_unix then _unix_site_data_dirs()? else recover [Path.join(\"/Library/Application Support\", _app_name)] end end elseif windows then recover [ Paths.join([ KnownFolders(KnownFolderIds.program_data())? _Opt.get[String](_app_author, \"\") _app_name ]) ] end else //*nix _unix_site_data_dirs()? end match _app_version | let v: String => for i in Range[USize](0, os_specific_dirs.size()) do os_specific_dirs(i)? = Path.join(os_specific_dirs(i)?, v) end end os_specific_dirs fun _unix_site_data_dirs(): Array[String] iso^ ? => let data_dirs: Array[String] iso = try Path.split_list(_env_vars(\"XDG_DATA_DIRS\")?) else // fallback default dirs recover iso [\"/usr/local/share\"; \"/usr/share\"] end end for idx in Range[USize](0, data_dirs.size()) do data_dirs(idx)? = Path.join(data_dirs(idx)?, _app_name) end consume data_dirs fun user_config_dir(): String ? => \"\"\" Return full path to the user-specific config dir for this application. \"\"\" ifdef windows then user_data_dir()? else let os_specific_dir = ifdef osx then if _osx_as_unix then _unix_user_config_dir()? else Paths.join([_home as String; \"Library\"; \"Preferences\"; _app_name]) end else // *nix _unix_user_config_dir()? end // apply version match _app_version | None => os_specific_dir | let v: String => Path.join(os_specific_dir, v) end end fun _unix_user_config_dir(): String ? => let base_path = _env_vars.get_or_else( \"XDG_CONFIG_HOME\", Path.join(_home as String, \".config\")) Path.join( _expand_user(base_path)?, _app_name) fun site_config_dirs(): Array[String] val ? => \"\"\" Return full path to the user-shared config dirs for this application. \"\"\" ifdef windows then site_data_dirs()? else let os_specific_dirs: Array[String] iso = ifdef osx then if _osx_as_unix then _unix_site_config_dirs()? else recover [Path.join(\"/Library/Preferences\", _app_name)] end end else //*nix _unix_site_config_dirs()? end match _app_version | let v: String => for i in Range[USize](0, os_specific_dirs.size()) do os_specific_dirs(i)? = Path.join(os_specific_dirs(i)?, v) end end os_specific_dirs end fun _unix_site_config_dirs(): Array[String] iso^ ? => let config_dirs: Array[String] iso = try Path.split_list(_env_vars(\"XDG_CONFIG_DIRS\")?) else // fallback default dirs recover iso [\"/etc/xdg\"] end end for idx in Range[USize](0, config_dirs.size()) do config_dirs(idx)? = Path.join(config_dirs(idx)?, _app_name) end consume config_dirs fun user_cache_dir(): String ? => \"\"\" Return full path to the user-specific cache dir for this application. \"\"\" let os_specific_dir = ifdef osx then if _osx_as_unix then _unix_user_cache_dir()? else Paths.join([_home as String; \"Library\"; \"Caches\"; _app_name]) end elseif windows then let known_folder: String val = KnownFolders(KnownFolderIds.app_data_local())? Paths.join([ known_folder _Opt.get[String](_app_author, \"\") _app_name \"Cache\" ]) else // *nix _unix_user_cache_dir()? end match _app_version | None => os_specific_dir | let v: String => Path.join(os_specific_dir, v) end fun _unix_user_cache_dir(): String ? => Path.join( _expand_user(_env_vars.get_or_else(\"XDG_CACHE_HOME\", \"~/.cache\"))?, _app_name) fun user_state_dir(): String ? => \"\"\" Return full path to the user-specific state dir for this application. See https://wiki.debian.org/XDGBaseDirectorySpecification#state \"\"\" ifdef osx then if _osx_as_unix then _unix_user_state_dir()? else user_data_dir()? end elseif windows then user_data_dir()? else // *nix _unix_user_state_dir()? end fun _unix_user_state_dir(): String ? => Paths.join([ _expand_user( _env_vars.get_or_else( \"XDG_STATE_HOME\", \"~/.local/state\"))? _app_name _Opt.get[String](_app_version, \"\") ]) fun user_log_dir(): String ? => \"\"\" Return full path to the user-specific log dir for this application. \"\"\" ifdef osx then if _osx_as_unix then _unix_user_log_dir()? else Paths.join([ _home as String \"Library\" \"Logs\" _app_name _Opt.get[String](_app_version, \"\") ]) end elseif windows then user_data_dir()? else // *nix _unix_user_log_dir()? end fun _unix_user_log_dir(): String ? => Path.join( user_cache_dir()?, \"log\")","title":"Appdirs"},{"location":"src/appdirs/known_folders/","text":"use \"lib:shell32\" if windows use \"lib:ole32\" if windows use \"debug\" use @SHGetKnownFolderPath[U32](rfid: Pointer[U8] tag, flags: U32, token: Pointer[U32], path: Pointer[Pointer[U16]]) if windows use @WideCharToMultiByte[I32](code_page: U32, flags: U32, char_str: Pointer[U16], char_str_size: I32, multi_byte_str: Pointer[U8] tag, multi_byte_str_size: I32, default_char: Pointer[U8], used_default_char: Pointer[U8]) if windows use @CoTaskMemFree[None](pv: Pointer[U16] tag) if windows primitive KnownFolderIds \"\"\" Known folder ids as described in: https://docs.microsoft.com/en-ca/windows/desktop/shell/knownfolderid functions return the little endian byte values of the folderid GUIDs \"\"\" fun profile(): Array[U8] val => \"\"\" The user's profile folder. A typical path is C:\\Users\\username. Applications should not create files or folders at this level; they should put their data under the locations referred to by CSIDL_APPDATA or CSIDL_LOCAL_APPDATA. However, if you are creating a new Known Folder the profile root referred to by CSIDL_PROFILE is appropriate. FOLDERID_Profile 5E6C858F-0E22-4760-9AFE-EA3317B67173 \"\"\" [as U8: 0x8f; 0x85; 0x6c; 0x5e; 0x22; 0x0e; 0x60; 0x47; 0x9A; 0xFE; 0xEA; 0x33; 0x17; 0xB6; 0x71; 0x73] fun app_data_roaming(): Array[U8] val => \"\"\" The file system directory that serves as a common repository for application-specific data. A typical path is C:\\Documents and Settings\\username\\Application Data. KNOWNFOLDERID: FOLDERID_RoamingAppData GUID: 3EB685DB-65F9-4CF6-A03A-E3EF65729F3D \"\"\" [as U8: 0xdb; 0x85; 0xb6; 0x3e; 0xf9; 0x65; 0xf6; 0x4c; 0xa0; 0x3a; 0xe3; 0xef; 0x65; 0x72; 0x9f; 0x3d] fun app_data_local(): Array[U8] val => \"\"\" The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\\Documents and Settings\\username\\Local Settings\\Application Data. FOLDERID_LocalAppData F1B32785-6FBA-4FCF-9D55-7B8E7F157091 \"\"\" [as U8: 0x85; 0x27; 0xb3; 0xf1; 0xba; 0x6f; 0xcf; 0x4f; 0x9d; 0x55; 0x7b; 0x8e; 0x7f; 0x15; 0x70; 0x91] fun program_data(): Array[U8] val => \"\"\" The file system directory that contains application data for all users. A typical path is C:\\Documents and Settings\\All Users\\Application Data. This folder is used for application data that is not user specific. For example, an application can store a spell-check dictionary, a database of clip art, or a log file in the CSIDL_COMMON_APPDATA folder. This information will not roam and is available to anyone using the computer. FOLDERID_ProgramData 62AB5D82-FDC1-4DC3-A9DD-070D1D495D97 \"\"\" [as U8: 0x82; 0x5d; 0xab; 0x62; 0xc1; 0xfd; 0xc3; 0x4d; 0xa9; 0xdd; 0x07; 0x0d; 0x1d; 0x49; 0x5d; 0x97] primitive KnownFolders \"\"\" Utility for getting some known folders on windows. https://docs.microsoft.com/en-ca/windows/desktop/shell/known-folders \"\"\" fun apply(folderid: Array[U8] val): String iso^ ? => ifdef not windows then compile_error \"known folders only supported on windows\" else // get UTF-16 wide-char path from windows API var path_pointer: Pointer[U16] = Pointer[U16] let result: U32 = @SHGetKnownFolderPath( folderid.cpointer(), // REFKNOWNFOLDERID U32(0), // retrieval flags -- no flags Pointer[U32], // some strange handle, pass NULL addressof path_pointer ) if result != 0 then Debug(\"Error getting known folder path: \" + result.string()) error end // extract path from path_pointer let bytes_necessary: I32 = @WideCharToMultiByte( WindowsCodePages.utf8(), U32(0), path_pointer, I32(-1), // length of path pointer, -1 for null terminated Pointer[U8].create(), I32(0), // indicating we want the required bytes back Pointer[U8].create(), // NULL Pointer[U8].create() // NULL ) let utf8_path: Array[U8] iso = recover Array[U8](bytes_necessary.usize()) end utf8_path.undefined(bytes_necessary.usize()) let convert_result: I32 = @WideCharToMultiByte( WindowsCodePages.utf8(), U32(0), path_pointer, I32(-1), // length of path pointer, -1 for null terminated utf8_path.cpointer(), utf8_path.size().i32(), Pointer[U8].create(), // NULL Pointer[U8].create() // NULL ) if convert_result == 0 then Debug(\"error converting from wchar to utf8.\") error end @CoTaskMemFree(path_pointer) try utf8_path.pop()? end // remove 0 terminator String.from_iso_array(consume utf8_path) end","title":"Known folders"},{"location":"src/appdirs/windows_codepages/","text":"primitive WindowsCodePages \"\"\" identifiers/constant for windows codepages for converting from one encoding to another. See: https://docs.microsoft.com/en-us/windows/desktop/Intl/code-page-identifiers \"\"\" fun utf8(): U32 => 65001","title":"Windows codepages"}]}